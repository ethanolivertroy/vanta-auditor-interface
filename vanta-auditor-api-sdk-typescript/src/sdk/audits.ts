/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { auditsCreateCommentForEvidence } from "../funcs/auditsCreateCommentForEvidence.js";
import { auditsCreateCustomControl } from "../funcs/auditsCreateCustomControl.js";
import { auditsCreateCustomEvidenceRequest } from "../funcs/auditsCreateCustomEvidenceRequest.js";
import { auditsGetEvidenceUrls } from "../funcs/auditsGetEvidenceUrls.js";
import { auditsList } from "../funcs/auditsList.js";
import { auditsListComments } from "../funcs/auditsListComments.js";
import { auditsListControls } from "../funcs/auditsListControls.js";
import { auditsListEvidence } from "../funcs/auditsListEvidence.js";
import { auditsUpdateEvidence } from "../funcs/auditsUpdateEvidence.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Audits extends ClientSDK {
  /**
   * List audits
   *
   * @remarks
   * Returns a paginated list of audits scoped to the audit firm.
   */
  async list(
    request: operations.ListAuditsRequest,
    options?: RequestOptions,
  ): Promise<components.PaginatedResponseAudit> {
    return unwrapAsync(auditsList(
      this,
      request,
      options,
    ));
  }

  /**
   * List audit evidence url
   *
   * @remarks
   * Returns a paginated list of evidence urls for an audit. This endpoint should be called whenever an
   * evidence is created or has a statusUpdatedAt field that is more recent than the most recent polling event.
   */
  async getEvidenceUrls(
    request: operations.ListAuditEvidenceUrlsRequest,
    options?: RequestOptions,
  ): Promise<components.PaginatedResponseEvidenceUrl> {
    return unwrapAsync(auditsGetEvidenceUrls(
      this,
      request,
      options,
    ));
  }

  /**
   * List audit evidence
   *
   * @remarks
   * Returns a paginated list of evidence for an audit.
   */
  async listEvidence(
    request: operations.ListAuditEvidenceRequest,
    options?: RequestOptions,
  ): Promise<components.PaginatedResponseEvidence> {
    return unwrapAsync(auditsListEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * List audit comments
   *
   * @remarks
   * Returns a paginated list of comments for an audit.
   */
  async listComments(
    request: operations.ListAuditCommentsRequest,
    options?: RequestOptions,
  ): Promise<components.PaginatedResponseComment> {
    return unwrapAsync(auditsListComments(
      this,
      request,
      options,
    ));
  }

  /**
   * List audit controls
   *
   * @remarks
   * Returns a paginated list of controls for an audit.
   */
  async listControls(
    request: operations.ListAuditControlsRequest,
    options?: RequestOptions,
  ): Promise<components.PaginatedResponseAuditorControl> {
    return unwrapAsync(auditsListControls(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a comment for audit evidence
   *
   * @remarks
   * Create a comment in Vanta for a piece of evidence.
   */
  async createCommentForEvidence(
    request: operations.CreateCommentForAuditEvidenceRequest,
    options?: RequestOptions,
  ): Promise<components.Comment> {
    return unwrapAsync(auditsCreateCommentForEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * Update audit evidence
   *
   * @remarks
   * Update audit evidence.
   */
  async updateEvidence(
    request: operations.UpdateAuditEvidenceRequest,
    options?: RequestOptions,
  ): Promise<components.Evidence> {
    return unwrapAsync(auditsUpdateEvidence(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a custom evidence request for an audit
   *
   * @remarks
   * Create a custom evidence request for an audit.
   */
  async createCustomEvidenceRequest(
    request: operations.CreateCustomEvidenceRequestRequest,
    options?: RequestOptions,
  ): Promise<components.CustomEvidenceRequest> {
    return unwrapAsync(auditsCreateCustomEvidenceRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a custom control for an audit
   *
   * @remarks
   * Create a custom control for an audit.
   */
  async createCustomControl(
    request: operations.CreateCustomControlRequest,
    options?: RequestOptions,
  ): Promise<components.Control> {
    return unwrapAsync(auditsCreateCustomControl(
      this,
      request,
      options,
    ));
  }
}
