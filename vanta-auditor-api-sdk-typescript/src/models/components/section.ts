/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Section = {
  /**
   * The section name
   */
  name: string;
  /**
   * The section framework
   */
  framework: string;
};

/** @internal */
export const Section$inboundSchema: z.ZodType<Section, z.ZodTypeDef, unknown> =
  z.object({
    name: z.string(),
    framework: z.string(),
  });

/** @internal */
export type Section$Outbound = {
  name: string;
  framework: string;
};

/** @internal */
export const Section$outboundSchema: z.ZodType<
  Section$Outbound,
  z.ZodTypeDef,
  Section
> = z.object({
  name: z.string(),
  framework: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Section$ {
  /** @deprecated use `Section$inboundSchema` instead. */
  export const inboundSchema = Section$inboundSchema;
  /** @deprecated use `Section$outboundSchema` instead. */
  export const outboundSchema = Section$outboundSchema;
  /** @deprecated use `Section$Outbound` instead. */
  export type Outbound = Section$Outbound;
}

export function sectionToJSON(section: Section): string {
  return JSON.stringify(Section$outboundSchema.parse(section));
}

export function sectionFromJSON(
  jsonString: string,
): SafeParseResult<Section, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Section$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Section' from JSON`,
  );
}
